package bitwarden

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
)

var providerErrorTitle = "Provider not configured"
var providerErrorMessage = "The provider hasn't been configured before apply, likely because it depends on an unknown value from another resource. This leads to weird stuff happening, so we'd prefer if you didn't do that. Thanks!"

func convertItemToState(item *Item, resource SecureNote) SecureNote {
	var result = SecureNote{
		Object:         types.String{Value: item.Object},
		ID:             types.String{Value: item.ID},
		OrganizationId: types.String{Value: item.OrganizationId},
		Type:           types.Number{Value: big.NewFloat(float64(item.Type))},
		Name:           types.String{Value: item.Name},
		Notes:          types.String{Value: item.Notes},
		CollectionIDs:  item.CollectionIDs,
		RevisionDate:   types.String{Value: item.RevisionDate},
	}

	if !resource.FolderID.Null {
		result.FolderID = types.String{Value: item.FolderID}
	} else {
		result.FolderID = types.String{Null: true}
	}

	if !resource.Favorite.Null {
		result.Favorite = types.Bool{Value: item.Favorite}
	} else {
		result.Favorite = types.Bool{Null: true}
	}

	if !resource.Reprompt.Null {
		result.Reprompt = types.Bool{Value: resource.Reprompt.Value}
	} else {
		result.Reprompt = types.Bool{Null: true}
	}
	return result
}

type resourceSecureNoteType struct{}

func (r resourceSecureNoteType) GetSchema(_ context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		Attributes: map[string]tfsdk.Attribute{
			// Object type, generated by BitWarden
			"object": {
				Type:     types.StringType,
				Computed: true,
			},
			// Secure note ID, generated by BitWarden
			"id": {
				Type:     types.StringType,
				Computed: true,
			},
			// Org ID this secure note belongs to, provided by the user
			"organization_id": {
				Type:     types.StringType,
				Required: true,
			},
			// Folder ID where to store this secure note, provided by the user, defaults to null
			"folder_id": {
				Type:     types.StringType,
				Optional: true,
			},
			// Object type, generated by BitWarden, for a secure note this value is always 2
			"type": {
				Type:     types.NumberType,
				Computed: true,
			},
			// Requires a password prompt to open, provided by the user, default to false
			"reprompt": {
				Type:     types.BoolType,
				Optional: true,
			},
			// Secure note name, provided by the user
			"name": {
				Type:     types.StringType,
				Required: true,
			},
			// Contents of the note, provided by the user
			"notes": {
				Type:     types.StringType,
				Required: true,
			},
			// Mark as favorite, provided by the user, default to false
			"favorite": {
				Type:     types.BoolType,
				Optional: true,
			},
			// Collections where this secure note should be, provided by the user
			"collection_ids": {
				Type:     types.ListType{ElemType: types.StringType},
				Required: true,
			},
			// Last update date, generated by BitWarden
			"revision_date": {
				Type:     types.StringType,
				Computed: true,
			},
		},
	}, nil
}

func (r resourceSecureNoteType) NewResource(_ context.Context, p tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	return resourceSecureNote{
		p: *(p.(*provider)),
	}, nil
}

type resourceSecureNote struct {
	p provider
}

func (r resourceSecureNote) ImportState(_ context.Context, _ tfsdk.ImportResourceStateRequest, _ *tfsdk.ImportResourceStateResponse) {
	// Implement this I guess?
}

func (r resourceSecureNote) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	if !r.p.configured {
		resp.Diagnostics.AddError(providerErrorTitle, providerErrorMessage)
		return
	}

	// Retrieve values from plan
	var plan SecureNote
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	secureNote, out, err := r.p.client.CreateSecureNote(plan)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error creating secure note",
			fmt.Sprintf("Could create secure note: %s\n%s", out, err.Error()),
		)
		return
	}

	secureNote, out, err = r.p.client.GetItem(secureNote.ID)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error creating secure note",
			fmt.Sprintf("Could create secure note: %s\n%s", out, err.Error()),
		)
		return
	}

	result := convertItemToState(secureNote, plan)

	diags = resp.State.Set(ctx, result)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r resourceSecureNote) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	if !r.p.configured {
		resp.Diagnostics.AddError(providerErrorTitle, providerErrorMessage)
		return
	}

	var state SecureNote
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	secureNoteId := state.ID.Value

	secureNote, out, err := r.p.client.GetItem(secureNoteId)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error reading secure note",
			fmt.Sprintf("Could not read secure note ID %s: %s\n%s", secureNoteId, out, err.Error()),
		)
		return
	}

	//var reprompt types.Bool
	//if !state.Reprompt.Null {
	//	reprompt = types.Bool{Value: secureNote.Reprompt == 1}
	//} else {
	//	reprompt = types.Bool{Null: true}
	//}
	//
	//var favorite types.Bool
	//if !state.Favorite.Null {
	//	favorite = types.Bool{Value: secureNote.Favorite}
	//} else {
	//	favorite = types.Bool{Null: true}
	//}
	//
	//newState := SecureNote{
	//	Object:         types.String{Value: secureNote.Object},
	//	ID:             types.String{Value: secureNote.ID},
	//	OrganizationId: types.String{Value: secureNote.OrganizationId},
	//	FolderID:       types.String{Value: secureNote.FolderID},
	//	Type:           types.Number{Value: big.NewFloat(float64(secureNote.Type))},
	//	Reprompt:       reprompt,
	//	Name:           types.String{Value: secureNote.Name},
	//	Notes:          types.String{Value: secureNote.Notes},
	//	Favorite:       favorite,
	//	CollectionIDs:  secureNote.CollectionIDs,
	//	RevisionDate:   types.String{Value: secureNote.RevisionDate},
	//}

	newState := convertItemToState(secureNote, state)

	diags = resp.State.Set(ctx, &newState)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r resourceSecureNote) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	if !r.p.configured {
		resp.Diagnostics.AddError(providerErrorTitle, providerErrorMessage)
		return
	}

	var state SecureNote
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var plan SecureNote
	diags = req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	secureNoteId := state.ID.Value

	if plan.OrganizationId.Value != state.OrganizationId.Value {
		out, err := r.p.client.MoveItem(secureNoteId, plan.OrganizationId.Value)
		if err != nil {
			resp.Diagnostics.AddError(
				"Error updating secure note",
				fmt.Sprintf("Could not move secure note ID %s to Org %s: %s\n%s", secureNoteId, plan.OrganizationId.Value, out, err.Error()),
			)
			return
		}
	}

	_, out, err := r.p.client.UpdateSecureNote(secureNoteId, plan)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error updating secure note",
			fmt.Sprintf("Could update secure note %s: %s\n%s", secureNoteId, out, err.Error()),
		)
		return
	}

	secureNote, out, err := r.p.client.GetItem(secureNoteId)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error creating secure note",
			fmt.Sprintf("Could create secure note: %s\n%s", out, err.Error()),
		)
		return
	}

	var result = convertItemToState(secureNote, plan)

	diags = resp.State.Set(ctx, result)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r resourceSecureNote) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	if !r.p.configured {
		resp.Diagnostics.AddError(providerErrorTitle, providerErrorMessage)
		return
	}

	var state SecureNote
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	secureNoteId := state.ID.Value

	out, err := r.p.client.DeleteItem(secureNoteId)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error deleting secure note",
			fmt.Sprintf("Could not delete secure note with ID %s: %s\n%s", secureNoteId, out, err.Error()),
		)
		return
	}

	resp.State.RemoveResource(ctx)
}
